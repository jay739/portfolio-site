pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'portfolio-site'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        CONTAINER_NAME = 'portfolio'
        COMPOSE_FILE = '../core.yml'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out source code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing Node.js dependencies...'
                sh '''
                    # Try npm ci first, fallback to npm install if lock file is out of sync
                    if ! npm ci; then
                        echo "‚ö†Ô∏è  Lock file out of sync, updating dependencies..."
                        npm install
                    fi
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image using existing compose setup...'
                script {
                    // Build using the existing core.yml configuration
                    sh '''
                        cd ..
                        docker-compose -f core.yml build portfolio
                        docker tag docker_services_portfolio:latest portfolio-site:${BUILD_NUMBER}
                        docker tag docker_services_portfolio:latest portfolio-site:latest
                    '''
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo 'üß™ Testing Docker image...'
                sh '''
                    # Start container for testing using the same config as production
                    docker run -d --name test-portfolio \
                        -p 3001:3000 \
                        --network proxy_net \
                        portfolio-site:${BUILD_NUMBER}
                    
                    # Wait for container to be ready
                    sleep 30
                    
                    # Test if the application is responding
                    curl -f http://localhost:3001/ || exit 1
                    
                    # Test blog endpoint specifically
                    curl -f http://localhost:3001/blog || exit 1
                    
                    # Test new blog post
                    curl -f http://localhost:3001/blog/ci-cd-test-post || exit 1
                    
                    # Clean up test container
                    docker stop test-portfolio
                    docker rm test-portfolio
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'üöÄ Deploying to production using existing compose setup...'
                script {
                    // Deploy using Docker Compose
                    sh '''
                        cd ..
                        
                        echo "üõë Stopping current portfolio container..."
                        docker-compose -f core.yml stop portfolio
                        docker-compose -f core.yml rm -f portfolio
                        
                        echo "üîÑ Rebuilding portfolio service..."
                        docker-compose -f core.yml build portfolio
                        
                        echo "üöÄ Starting portfolio service..."
                        docker-compose -f core.yml up -d portfolio
                        
                        echo "üßπ Cleaning up old images..."
                        docker image prune -f
                        
                        echo "‚úÖ Deployment completed!"
                    '''
                }
            }
        }
        
        stage('Health Check') {
            when {
                branch 'main'
            }
            steps {
                echo 'üè• Performing health checks...'
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        sh '''
                            # Wait for deployment to stabilize
                            sleep 60
                            
                            # Check if the application is responding
                            curl -f https://jay739.dev/ || exit 1
                            
                            # Check if blog is accessible
                            curl -f https://jay739.dev/blog || exit 1
                            
                            # Check if new blog post is available
                            curl -f https://jay739.dev/blog/ci-cd-test-post || exit 1
                            
                            echo "‚úÖ All health checks passed!"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'üéâ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
} 